swagger: '2.0'

info:
  x-ibm-name: profile
  version: 1.0.0
  title: profile

schemes:
  - https
host: $(catalog.host)
basePath: /api

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
 clientIdHeader:
   type: apiKey
   in: header
   name: X-IBM-Client-Id
 clientSecretHeader:
   in: "header"
   name: "X-IBM-Client-Secret"
   type: "apiKey"


security:
 -
   clientIdHeader: []
   clientSecretHeader: []

x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)

paths:
  '/userCredentials/{id}/user':
    get:
      tags:
        - userCredential
      summary: Fetches belongsTo relation user.
      operationId: userCredential.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: userCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /userCredentials:
    post:
      tags:
        - userCredential
      summary: Create a new instance of the model and persist it into the data source.
      operationId: userCredential.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    patch:
      tags:
        - userCredential
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: userCredential.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    put:
      tags:
        - userCredential
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: userCredential.replaceOrCreate__put_userCredentials
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    get:
      tags:
        - userCredential
      summary: Find all instances of the model matched by filter from the data source.
      operationId: userCredential.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/userCredential'
      deprecated: false
  /userCredentials/replaceOrCreate:
    post:
      tags:
        - userCredential
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: userCredential.replaceOrCreate__post_userCredentials_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  /userCredentials/upsertWithWhere:
    post:
      tags:
        - userCredential
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: userCredential.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  '/userCredentials/{id}/exists':
    get:
      tags:
        - userCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'userCredential.exists__get_userCredentials_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/userCredentials/{id}':
    head:
      tags:
        - userCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'userCredential.exists__head_userCredentials_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - userCredential
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: userCredential.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    put:
      tags:
        - userCredential
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'userCredential.replaceById__put_userCredentials_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    delete:
      tags:
        - userCredential
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: userCredential.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - userCredential
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: userCredential.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userCredential'
        - name: id
          in: path
          description: userCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  '/userCredentials/{id}/replace':
    post:
      tags:
        - userCredential
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'userCredential.replaceById__post_userCredentials_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  /userCredentials/findOne:
    get:
      tags:
        - userCredential
      summary: Find first instance of the model matched by filter from the data source.
      operationId: userCredential.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  /userCredentials/update:
    post:
      tags:
        - userCredential
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: userCredential.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /userCredentials/count:
    get:
      tags:
        - userCredential
      summary: Count instances of the model matched by where from the data source.
      operationId: userCredential.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/userIdentities/{id}/user':
    get:
      tags:
        - userIdentity
      summary: Fetches belongsTo relation user.
      operationId: userIdentity.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: userIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /userIdentities:
    post:
      tags:
        - userIdentity
      summary: Create a new instance of the model and persist it into the data source.
      operationId: userIdentity.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    patch:
      tags:
        - userIdentity
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: userIdentity.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    put:
      tags:
        - userIdentity
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: userIdentity.replaceOrCreate__put_userIdentities
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    get:
      tags:
        - userIdentity
      summary: Find all instances of the model matched by filter from the data source.
      operationId: userIdentity.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/userIdentity'
      deprecated: false
  /userIdentities/replaceOrCreate:
    post:
      tags:
        - userIdentity
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: userIdentity.replaceOrCreate__post_userIdentities_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  /userIdentities/upsertWithWhere:
    post:
      tags:
        - userIdentity
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: userIdentity.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  '/userIdentities/{id}/exists':
    get:
      tags:
        - userIdentity
      summary: Check whether a model instance exists in the data source.
      operationId: 'userIdentity.exists__get_userIdentities_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/userIdentities/{id}':
    head:
      tags:
        - userIdentity
      summary: Check whether a model instance exists in the data source.
      operationId: 'userIdentity.exists__head_userIdentities_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - userIdentity
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: userIdentity.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    put:
      tags:
        - userIdentity
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'userIdentity.replaceById__put_userIdentities_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    delete:
      tags:
        - userIdentity
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: userIdentity.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - userIdentity
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: userIdentity.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userIdentity'
        - name: id
          in: path
          description: userIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  '/userIdentities/{id}/replace':
    post:
      tags:
        - userIdentity
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'userIdentity.replaceById__post_userIdentities_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  /userIdentities/findOne:
    get:
      tags:
        - userIdentity
      summary: Find first instance of the model matched by filter from the data source.
      operationId: userIdentity.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  /userIdentities/update:
    post:
      tags:
        - userIdentity
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: userIdentity.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /userIdentities/count:
    get:
      tags:
        - userIdentity
      summary: Count instances of the model matched by where from the data source.
      operationId: userIdentity.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/AccessTokens/{id}/user':
    get:
      tags:
        - AccessToken
      summary: Fetches belongsTo relation user.
      operationId: AccessToken.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: AccessToken id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /AccessTokens:
    post:
      tags:
        - AccessToken
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AccessToken.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    patch:
      tags:
        - AccessToken
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: AccessToken.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    put:
      tags:
        - AccessToken
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AccessToken.replaceOrCreate__put_AccessTokens
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    get:
      tags:
        - AccessToken
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AccessToken.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
  /AccessTokens/replaceOrCreate:
    post:
      tags:
        - AccessToken
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AccessToken.replaceOrCreate__post_AccessTokens_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  /AccessTokens/upsertWithWhere:
    post:
      tags:
        - AccessToken
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: AccessToken.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/AccessTokens/{id}/exists':
    get:
      tags:
        - AccessToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'AccessToken.exists__get_AccessTokens_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AccessTokens/{id}':
    head:
      tags:
        - AccessToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'AccessToken.exists__head_AccessTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AccessToken
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AccessToken.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    put:
      tags:
        - AccessToken
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AccessToken.replaceById__put_AccessTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - AccessToken
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AccessToken.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AccessToken
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: AccessToken.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: AccessToken id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/AccessTokens/{id}/replace':
    post:
      tags:
        - AccessToken
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AccessToken.replaceById__post_AccessTokens_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  /AccessTokens/findOne:
    get:
      tags:
        - AccessToken
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AccessToken.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  /AccessTokens/update:
    post:
      tags:
        - AccessToken
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AccessToken.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AccessTokens/count:
    get:
      tags:
        - AccessToken
      summary: Count instances of the model matched by where from the data source.
      operationId: AccessToken.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ACLs:
    post:
      tags:
        - ACL
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ACL.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    patch:
      tags:
        - ACL
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ACL.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    put:
      tags:
        - ACL
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ACL.replaceOrCreate__put_ACLs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    get:
      tags:
        - ACL
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ACL.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/replaceOrCreate:
    post:
      tags:
        - ACL
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ACL.replaceOrCreate__post_ACLs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/upsertWithWhere:
    post:
      tags:
        - ACL
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ACL.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  '/ACLs/{id}/exists':
    get:
      tags:
        - ACL
      summary: Check whether a model instance exists in the data source.
      operationId: 'ACL.exists__get_ACLs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ACLs/{id}':
    head:
      tags:
        - ACL
      summary: Check whether a model instance exists in the data source.
      operationId: 'ACL.exists__head_ACLs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ACL
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ACL.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    put:
      tags:
        - ACL
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ACL.replaceById__put_ACLs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    delete:
      tags:
        - ACL
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ACL.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ACL
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ACL.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ACL'
        - name: id
          in: path
          description: ACL id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  '/ACLs/{id}/replace':
    post:
      tags:
        - ACL
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ACL.replaceById__post_ACLs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/findOne:
    get:
      tags:
        - ACL
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ACL.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/update:
    post:
      tags:
        - ACL
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ACL.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ACLs/count:
    get:
      tags:
        - ACL
      summary: Count instances of the model matched by where from the data source.
      operationId: ACL.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/RoleMappings/{id}/role':
    get:
      tags:
        - RoleMapping
      summary: Fetches belongsTo relation role.
      operationId: RoleMapping.prototype.__get__role
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: RoleMapping id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /RoleMappings:
    post:
      tags:
        - RoleMapping
      summary: Create a new instance of the model and persist it into the data source.
      operationId: RoleMapping.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    patch:
      tags:
        - RoleMapping
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: RoleMapping.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    put:
      tags:
        - RoleMapping
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: RoleMapping.replaceOrCreate__put_RoleMappings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    get:
      tags:
        - RoleMapping
      summary: Find all instances of the model matched by filter from the data source.
      operationId: RoleMapping.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/replaceOrCreate:
    post:
      tags:
        - RoleMapping
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: RoleMapping.replaceOrCreate__post_RoleMappings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/upsertWithWhere:
    post:
      tags:
        - RoleMapping
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: RoleMapping.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/RoleMappings/{id}/exists':
    get:
      tags:
        - RoleMapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'RoleMapping.exists__get_RoleMappings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/RoleMappings/{id}':
    head:
      tags:
        - RoleMapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'RoleMapping.exists__head_RoleMappings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - RoleMapping
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: RoleMapping.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    put:
      tags:
        - RoleMapping
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'RoleMapping.replaceById__put_RoleMappings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - RoleMapping
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: RoleMapping.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - RoleMapping
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: RoleMapping.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: RoleMapping id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/RoleMappings/{id}/replace':
    post:
      tags:
        - RoleMapping
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'RoleMapping.replaceById__post_RoleMappings_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/findOne:
    get:
      tags:
        - RoleMapping
      summary: Find first instance of the model matched by filter from the data source.
      operationId: RoleMapping.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/update:
    post:
      tags:
        - RoleMapping
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: RoleMapping.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /RoleMappings/count:
    get:
      tags:
        - RoleMapping
      summary: Count instances of the model matched by where from the data source.
      operationId: RoleMapping.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Roles/{id}/principals/{fk}':
    get:
      tags:
        - Role
      summary: Find a related item by id for principals.
      operationId: Role.prototype.__findById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - Role
      summary: Delete a related item by id for principals.
      operationId: Role.prototype.__destroyById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Role
      summary: Update a related item by id for principals.
      operationId: Role.prototype.__updateById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/Roles/{id}/principals':
    get:
      tags:
        - Role
      summary: Queries principals of Role.
      operationId: Role.prototype.__get__principals
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RoleMapping'
      deprecated: false
    post:
      tags:
        - Role
      summary: Creates a new instance in principals of this model.
      operationId: Role.prototype.__create__principals
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - Role
      summary: Deletes all principals of this model.
      operationId: Role.prototype.__delete__principals
      parameters:
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Roles/{id}/principals/count':
    get:
      tags:
        - Role
      summary: Counts principals of Role.
      operationId: Role.prototype.__count__principals
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Roles:
    post:
      tags:
        - Role
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Role.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    patch:
      tags:
        - Role
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Role.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    put:
      tags:
        - Role
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Role.replaceOrCreate__put_Roles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    get:
      tags:
        - Role
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Role.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
  /Roles/replaceOrCreate:
    post:
      tags:
        - Role
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Role.replaceOrCreate__post_Roles_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/upsertWithWhere:
    post:
      tags:
        - Role
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Role.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/Roles/{id}/exists':
    get:
      tags:
        - Role
      summary: Check whether a model instance exists in the data source.
      operationId: 'Role.exists__get_Roles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Roles/{id}':
    head:
      tags:
        - Role
      summary: Check whether a model instance exists in the data source.
      operationId: 'Role.exists__head_Roles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Role
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Role.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    put:
      tags:
        - Role
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Role.replaceById__put_Roles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - Role
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Role.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Role
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Role.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/Roles/{id}/replace':
    post:
      tags:
        - Role
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Role.replaceById__post_Roles_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/findOne:
    get:
      tags:
        - Role
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Role.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/update:
    post:
      tags:
        - Role
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Role.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Roles/count:
    get:
      tags:
        - Role
      summary: Count instances of the model matched by where from the data source.
      operationId: Role.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MyUsers/{id}/accessTokens/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for accessTokens.
      operationId: MyUser.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for accessTokens.
      operationId: MyUser.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for accessTokens.
      operationId: MyUser.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/MyUsers/{id}/identities':
    get:
      tags:
        - MyUser
      summary: Fetches hasOne relation identities.
      operationId: MyUser.prototype.__get__identities
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in identities of this model.
      operationId: MyUser.prototype.__create__identities
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userIdentity'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update identities of this model.
      operationId: MyUser.prototype.__update__identities
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userIdentity'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes identities of this model.
      operationId: MyUser.prototype.__destroy__identities
      parameters:
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/credentials/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for credentials.
      operationId: MyUser.prototype.__findById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for credentials.
      operationId: MyUser.prototype.__destroyById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for credentials.
      operationId: MyUser.prototype.__updateById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userCredential'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  '/MyUsers/{id}/roles/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for roles.
      operationId: MyUser.prototype.__findById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for roles.
      operationId: MyUser.prototype.__destroyById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for roles.
      operationId: MyUser.prototype.__updateById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/MyUsers/{id}/roles/rel/{fk}':
    put:
      tags:
        - MyUser
      summary: Add a related item by id for roles.
      operationId: MyUser.prototype.__link__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Remove the roles relation to an item by id.
      operationId: MyUser.prototype.__unlink__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - MyUser
      summary: Check the existence of roles relation to an item by id.
      operationId: MyUser.prototype.__exists__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/MyUsers/{id}/accessTokens':
    get:
      tags:
        - MyUser
      summary: Queries accessTokens of MyUser.
      operationId: MyUser.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in accessTokens of this model.
      operationId: MyUser.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all accessTokens of this model.
      operationId: MyUser.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/accessTokens/count':
    get:
      tags:
        - MyUser
      summary: Counts accessTokens of MyUser.
      operationId: MyUser.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MyUsers/{id}/credentials':
    get:
      tags:
        - MyUser
      summary: Queries credentials of MyUser.
      operationId: MyUser.prototype.__get__credentials
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/userCredential'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in credentials of this model.
      operationId: MyUser.prototype.__create__credentials
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userCredential'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all credentials of this model.
      operationId: MyUser.prototype.__delete__credentials
      parameters:
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/credentials/count':
    get:
      tags:
        - MyUser
      summary: Counts credentials of MyUser.
      operationId: MyUser.prototype.__count__credentials
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MyUsers/{id}/roles':
    get:
      tags:
        - MyUser
      summary: Queries roles of MyUser.
      operationId: MyUser.prototype.__get__roles
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in roles of this model.
      operationId: MyUser.prototype.__create__roles
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all roles of this model.
      operationId: MyUser.prototype.__delete__roles
      parameters:
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/roles/count':
    get:
      tags:
        - MyUser
      summary: Counts roles of MyUser.
      operationId: MyUser.prototype.__count__roles
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MyUsers:
    post:
      tags:
        - MyUser
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MyUser.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    patch:
      tags:
        - MyUser
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: MyUser.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MyUser.replaceOrCreate__put_MyUsers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    get:
      tags:
        - MyUser
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MyUser.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/replaceOrCreate:
    post:
      tags:
        - MyUser
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MyUser.replaceOrCreate__post_MyUsers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/upsertWithWhere:
    post:
      tags:
        - MyUser
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: MyUser.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/MyUsers/{id}/exists':
    get:
      tags:
        - MyUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'MyUser.exists__get_MyUsers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MyUsers/{id}':
    head:
      tags:
        - MyUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'MyUser.exists__head_MyUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MyUser
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MyUser.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MyUser.replaceById__put_MyUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MyUser.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MyUser
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: MyUser.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUser'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/MyUsers/{id}/replace':
    post:
      tags:
        - MyUser
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MyUser.replaceById__post_MyUsers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/findOne:
    get:
      tags:
        - MyUser
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MyUser.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/update:
    post:
      tags:
        - MyUser
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MyUser.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MyUsers/count:
    get:
      tags:
        - MyUser
      summary: Count instances of the model matched by where from the data source.
      operationId: MyUser.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MyUsers/login:
    post:
      tags:
        - MyUser
      summary: Login a user with username/email and password.
      operationId: MyUser.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /MyUsers/logout:
    post:
      tags:
        - MyUser
      summary: Logout a user with access token.
      operationId: MyUser.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/verify':
    post:
      tags:
        - MyUser
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: MyUser.prototype.verify
      parameters:
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/confirm:
    get:
      tags:
        - MyUser
      summary: Confirm a user registration with identity verification token.
      operationId: MyUser.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/reset:
    post:
      tags:
        - MyUser
      summary: Reset password for a user with email.
      operationId: MyUser.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/change-password:
    post:
      tags:
        - MyUser
      summary: "Change a user's password."
      operationId: MyUser.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/reset-password:
    post:
      tags:
        - MyUser
      summary: "Reset user's password via a password-reset token."
      operationId: MyUser.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/authenticate:
    get:
      tags:
        - MyUser
      operationId: MyUser.authenticate
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              user:
                type: object
      deprecated: false
  /Configurations:
    post:
      tags:
        - Configuration
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Configuration.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    patch:
      tags:
        - Configuration
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Configuration.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    put:
      tags:
        - Configuration
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Configuration.replaceOrCreate__put_Configurations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    get:
      tags:
        - Configuration
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Configuration.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/replaceOrCreate:
    post:
      tags:
        - Configuration
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Configuration.replaceOrCreate__post_Configurations_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/upsertWithWhere:
    post:
      tags:
        - Configuration
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Configuration.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  '/Configurations/{id}/exists':
    get:
      tags:
        - Configuration
      summary: Check whether a model instance exists in the data source.
      operationId: 'Configuration.exists__get_Configurations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Configurations/{id}':
    head:
      tags:
        - Configuration
      summary: Check whether a model instance exists in the data source.
      operationId: 'Configuration.exists__head_Configurations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Configuration
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Configuration.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    put:
      tags:
        - Configuration
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Configuration.replaceById__put_Configurations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    delete:
      tags:
        - Configuration
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Configuration.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Configuration
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Configuration.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Configuration'
        - name: id
          in: path
          description: Configuration id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  '/Configurations/{id}/replace':
    post:
      tags:
        - Configuration
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Configuration.replaceById__post_Configurations_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/findOne:
    get:
      tags:
        - Configuration
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Configuration.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/update:
    post:
      tags:
        - Configuration
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Configuration.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Configurations/count:
    get:
      tags:
        - Configuration
      summary: Count instances of the model matched by where from the data source.
      operationId: Configuration.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UserSettings:
    post:
      tags:
        - UserSetting
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UserSetting.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    patch:
      tags:
        - UserSetting
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: UserSetting.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    put:
      tags:
        - UserSetting
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: UserSetting.replaceOrCreate__put_UserSettings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    get:
      tags:
        - UserSetting
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UserSetting.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/replaceOrCreate:
    post:
      tags:
        - UserSetting
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: UserSetting.replaceOrCreate__post_UserSettings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/upsertWithWhere:
    post:
      tags:
        - UserSetting
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: UserSetting.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  '/UserSettings/{id}/exists':
    get:
      tags:
        - UserSetting
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserSetting.exists__get_UserSettings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UserSettings/{id}':
    head:
      tags:
        - UserSetting
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserSetting.exists__head_UserSettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UserSetting
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UserSetting.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    put:
      tags:
        - UserSetting
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'UserSetting.replaceById__put_UserSettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    delete:
      tags:
        - UserSetting
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UserSetting.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - UserSetting
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: UserSetting.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserSetting'
        - name: id
          in: path
          description: UserSetting id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  '/UserSettings/{id}/replace':
    post:
      tags:
        - UserSetting
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'UserSetting.replaceById__post_UserSettings_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/findOne:
    get:
      tags:
        - UserSetting
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UserSetting.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/update:
    post:
      tags:
        - UserSetting
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UserSetting.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UserSettings/count:
    get:
      tags:
        - UserSetting
      summary: Count instances of the model matched by where from the data source.
      operationId: UserSetting.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false


definitions:
  x-any:
    properties: {}
  MyUser:
    properties:
      provider:
        type: string
      profile:
        type: object
      audit:
        type: object
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: string
    required:
      - email
    additionalProperties: false
  userCredential:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      id:
        type: number
        format: double
      userId:
        type: string
    additionalProperties: false
  userIdentity:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      id:
        type: number
        format: double
      userId:
        type: string
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: string
    required:
      - id
    additionalProperties: false
  ACL:
    properties:
      model:
        description: The name of the model
        type: string
      property:
        description: 'The name of the property, method, scope, or relation'
        type: string
      accessType:
        type: string
      permission:
        type: string
      principalType:
        type: string
      principalId:
        type: string
      id:
        type: string
    additionalProperties: false
  Role:
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
    required:
      - name
    additionalProperties: false
  RoleMapping:
    description: Map principals to roles
    properties:
      id:
        type: string
      principalType:
        description: 'The principal type, such as USER, APPLICATION, ROLE, or user model name in case of multiple user models'
        type: string
      principalId:
        type: string
      roleId:
        type: string
    additionalProperties: false
  Configuration:
    properties:
      configurationType:
        type: string
      configuration:
        type: object
      id:
        type: string
    additionalProperties: false
  UserSetting:
    properties:
      notify:
        type: string
      userId:
        type: string
      registrationId:
        type: string
      placeId:
        type: string
      timestamp:
        type: string
        format: date-time
      id:
        type: string
    additionalProperties: false

